<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.7.1 on darwin)" generated="20190313 14:43:57.785" rpa="false">
<suite id="s1" name="Robot" source="/Users/nathan_patnam/Code/Travis_CI/python-travis-lab/src/tests/acceptance/robot.robot">
<test id="s1-t1" name="Push button">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.831" endtime="20190313 14:43:57.832"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.
Example:
| Push Buttons     | 1 + 2 = |
| Result Should Be | 3       |</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.832" endtime="20190313 14:43:57.832"></status>
</kw>
<status status="PASS" starttime="20190313 14:43:57.831" endtime="20190313 14:43:57.832" critical="yes"></status>
</test>
<test id="s1-t2" name="Push multiple buttons">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.833" endtime="20190313 14:43:57.833"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.833" endtime="20190313 14:43:57.834"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.
Example:
| Push Buttons     | 1 + 2 = |
| Result Should Be | 3       |</doc>
<arguments>
<arg>12</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.834" endtime="20190313 14:43:57.834"></status>
</kw>
<status status="PASS" starttime="20190313 14:43:57.833" endtime="20190313 14:43:57.834" critical="yes"></status>
</test>
<test id="s1-t3" name="Simple calculation">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.834" endtime="20190313 14:43:57.835"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>+</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.835" endtime="20190313 14:43:57.835"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>2</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.835" endtime="20190313 14:43:57.835"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>=</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.835" endtime="20190313 14:43:57.836"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.
Example:
| Push Buttons     | 1 + 2 = |
| Result Should Be | 3       |</doc>
<arguments>
<arg>3</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.836" endtime="20190313 14:43:57.836"></status>
</kw>
<status status="PASS" starttime="20190313 14:43:57.834" endtime="20190313 14:43:57.836" critical="yes"></status>
</test>
<test id="s1-t4" name="Longer calculation">
<kw name="Push Buttons" library="CalculatorLibrary">
<doc>Pushes the specified ``buttons``.
Uses `Push Button` to push all the buttons that must be given as
a single string. Possible spaces are ignored.
Example:
| Push Buttons | 1 + 2 = |</doc>
<arguments>
<arg>5 + 4 - 3 * 2 / 1 =</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.838" endtime="20190313 14:43:57.838"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.
Example:
| Push Buttons     | 1 + 2 = |
| Result Should Be | 3       |</doc>
<arguments>
<arg>3</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.838" endtime="20190313 14:43:57.839"></status>
</kw>
<status status="PASS" starttime="20190313 14:43:57.836" endtime="20190313 14:43:57.839" critical="yes"></status>
</test>
<test id="s1-t5" name="Clear">
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.841" endtime="20190313 14:43:57.842"></status>
</kw>
<kw name="Push Button" library="CalculatorLibrary">
<doc>Pushes the specified ``button``.
The given value is passed to the calculator directly. Valid buttons
are everything that the calculator accepts.
Examples:
| Push Button | 1 |
| Push Button | C |
Use `Push Buttons` if you need to input longer expressions.</doc>
<arguments>
<arg>C</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.842" endtime="20190313 14:43:57.842"></status>
</kw>
<kw name="Result Should Be" library="CalculatorLibrary">
<doc>Verifies that the current result is ``expected``.
Example:
| Push Buttons     | 1 + 2 = |
| Result Should Be | 3       |</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20190313 14:43:57.843" endtime="20190313 14:43:57.843"></status>
</kw>
<status status="PASS" starttime="20190313 14:43:57.839" endtime="20190313 14:43:57.843" critical="yes"></status>
</test>
<doc>Example test cases using the keyword-driven testing approach.

All tests contain a workflow constructed from keywords in
``CalculatorLibrary.py``. Creating new tests or editing
existing is easy even for people without programming skills.

The _keyword-driven_ appoach works well for normal test
automation, but the _gherkin_ style might be even better
if also business people need to understand tests. If the
same workflow needs to repeated multiple times, it is best
to use to the _data-driven_ approach.</doc>
<status status="PASS" starttime="20190313 14:43:57.791" endtime="20190313 14:43:57.843"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="Robot">Robot</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
